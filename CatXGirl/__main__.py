import importlib
import re
import time
from platform import python_version as y
from sys import argv
from typing import Optional

from pyrogram import __version__ as pyrover
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram import __version__ as telever
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.ext.dispatcher import DispatcherHandlerStop, run_async
from telegram.utils.helpers import escape_markdown
from telethon import __version__ as tlhver

import FallenRobot.modules.sql.users_sql as sql
from FallenRobot import (
    BOT_NAME,
    BOT_USERNAME,
    CERT_PATH,
    DONATION_LINK,
    LOGGER,
    OWNER_ID,
    PORT,
    START_IMG,
    SUPPORT_CHAT,
    TOKEN,
    URL,
    WEBHOOK,
    StartTime,
    dispatcher,
    pbot,
    telethn,
    updater,
)

# needed to dynamically load modules
# NOTE: Module order is not guaranteed, specify that in the config file!
from FallenRobot.modules import ALL_MODULES
from FallenRobot.modules.helper_funcs.chat_status import is_user_admin
from FallenRobot.modules.helper_funcs.misc import paginate_modules


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time


PM_START_TEXT = """
* ú·¥á è* {}, ü§°

*‚ú¨ ·¥õ ú…™s …™s* {} !
* ô·¥è·¥õ ·¥ç·¥Ä…¥·¥Ä·¥ä·¥á·¥ç·¥á…¥ …¢ Ä·¥ú·¥ò ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç  è·¥Ä…¥…¢ ·¥ã·¥ú·¥Ä·¥õ ·¥Ö·¥á…¥…¢·¥Ä…¥  ô·¥á ô·¥á Ä·¥Ä·¥ò·¥Ä Íú∞…™·¥õ·¥ú Ä  è·¥Ä…¥…¢ ·¥ç·¥á…¥…¢·¥Ä…¢·¥ú·¥ç·¥ã·¥Ä…¥ ·¥Ö·¥Ä…¥  ô·¥á Ä…¢·¥ú…¥·¥Ä.*
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
*‚ú¨ ·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ …™…¥Íú∞·¥è Ä·¥ç·¥Äs…™ ·¥õ·¥á…¥·¥õ·¥Ä…¥…¢ ·¥ç·¥è·¥Ö·¥ú ü ·¥Ö·¥Ä…¥ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú.*
"""


buttons = [
    [
        InlineKeyboardButton(
            text="üßë‚Äçüîß ·¥Ä·¥Ö·¥Ö ·¥ç·¥á",
            url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
        ),
    
    
        InlineKeyboardButton(text="‚ùì·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="gusion_"),
    ],
    [
        InlineKeyboardButton(text="üí∞ ·¥Ö·¥è…¥·¥Ä·¥õ·¥á", callback_data="fallen_"),
        InlineKeyboardButton(text="üèÜ s·¥ú·¥©·¥©·¥è Ä·¥õ", callback_data="sayang_"),
    ],
    [
        InlineKeyboardButton(text="üëë ·¥è·¥°…¥·¥á Ä", url=f"tg://user?id={OWNER_ID}"),
        InlineKeyboardButton(text="üìØ s·¥è·¥ú Ä·¥Ñ·¥á", callback_data="source_"),
    ],
]

HELP_STRINGS = f"""
*¬ª {BOT_NAME} ·¥áx·¥Ñ ü·¥ús…™·¥†·¥á Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥ás*

‚û≤ /start : Íú±·¥õ·¥Ä Ä·¥õÍú± ·¥ç·¥á | ·¥Ä·¥Ñ·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥õ·¥è ·¥ç·¥á  è·¥è·¥ú'·¥†·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö·¥è…¥·¥á …™·¥õ‚Äã.
‚û≤ /donate : s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥ç·¥á  ô è ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ Íú∞·¥è Ä ·¥ç è  ú·¥Ä Ä·¥Ö·¥°·¥è Ä·¥ã‚Äã.
‚û≤ /help  : ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± Íú±·¥á·¥Ñ·¥õ…™·¥è…¥.
  ‚Ä£ …™…¥ ·¥ò·¥ç : ·¥°…™ ü ü Íú±·¥á…¥·¥Ö  è·¥è·¥ú  ú·¥á ü·¥ò‚Äã Íú∞·¥è Ä ·¥Ä ü ü Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ç·¥è·¥Ö·¥ú ü·¥áÍú±.
  ‚Ä£ …™…¥ …¢ Ä·¥è·¥ú·¥ò : ·¥°…™ ü ü  Ä·¥á·¥Ö…™ Ä·¥á·¥Ñ·¥õ  è·¥è·¥ú ·¥õ·¥è ·¥ò·¥ç, ·¥°…™·¥õ ú ·¥Ä ü ü ·¥õ ú·¥Ä·¥õ  ú·¥á ü·¥ò‚Äã ·¥ç·¥è·¥Ö·¥ú ü·¥áÍú±."""

DONATE_STRING = """ ú·¥á è  ô·¥Ä ô è,
  s·¥á…¥·¥Ä…¥…¢ ·¥ç·¥á…¥·¥Ö·¥á…¥…¢·¥Ä Ä  ô·¥Ä ú·¥°·¥Ä ·¥Ä…¥·¥Ö·¥Ä …™…¥…¢…™…¥ ·¥ç·¥á…¥ è·¥ú·¥ç ô·¥Ä…¥…¢.

üç©üç©üç©üç©üç©üç©."""

IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []
CHAT_SETTINGS = {}
USER_SETTINGS = {}

for module_name in ALL_MODULES:
    imported_module = importlib.import_module("FallenRobot.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if imported_module.__mod_name__.lower() not in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("Can't have two modules with the same name! Please change one")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
        reply_markup=keyboard,
    )


@run_async
def start(update: Update, context: CallbackContext):
    args = context.args
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
                    ),
                )

            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match.group(1))

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match.group(1), update.effective_user.id, False)
                else:
                    send_settings(match.group(1), update.effective_user.id, True)

            elif args[0][1:].isdigit() and "rules" in IMPORTED:
                IMPORTED["rules"].send_rules(update, args[0], from_pm=True)

        else:
            first_name = update.effective_user.first_name
            update.effective_message.reply_sticker(
                "CAACAgUAAx0CW7OmbAACMS1jdqAAAaYgfBjpYwbv3uN02k5evskAAoUFAAKANqlUrinPET4g6CwrBA"
            )
            update.effective_message.reply_text(
                PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME),
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
            )
    else:
        update.effective_message.reply_photo(
            START_IMG,
            caption="…™ ·¥Ä·¥ç ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è !\n<b>…™ ·¥Ö…™·¥Ö…¥'·¥õ s ü·¥á·¥ò·¥õ s…™…¥·¥Ñ·¥á‚Äã:</b> <code>{}</code>".format(
                uptime
            ),
            parse_mode=ParseMode.HTML,
        )


def error_handler(update, context):
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = (
        "An exception was raised while handling an update\n"
        "<pre>update = {}</pre>\n\n"
        "<pre>{}</pre>"
    ).format(
        html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False)),
        html.escape(tb),
    )

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update: Update, context: CallbackContext):
    error = context.error
    try:
        raise error
    except Unauthorized:
        print("no nono1")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("no nono2")
        print("BadRequest caught")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("no nono3")
        # handle slow connection problems
    except NetworkError:
        print("no nono4")
        # handle other connection problems
    except ChatMigrated as err:
        print("no nono5")
        print(err)
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        print(error)
        # handle all other telegram related errors


@run_async
def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)

    print(query.message.chat.id)

    try:
        if mod_match:
            module = mod_match.group(1)
            text = (
                "¬ª *·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös Íú∞·¥è Ä‚Äã‚Äã* *{}* :\n".format(
                    HELPABLE[module].__mod_name__
                )
                + HELPABLE[module].__help__
            )
            query.message.edit_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match.group(1))
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match.group(1))
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        context.bot.answer_callback_query(query.id)

    except BadRequest:
        pass


@run_async 
def Mati_muta_callback(update: Update, context: CallbackContext): 
    query = update.callback_query 
    if query.data == "mati_": 
       uptime = get_readable_time((time.time() - StartTime)) 
       query.message.edit_text( 
           text=f"*ü•Ä s·¥ú·¥Ö·¥è·¥á Äs ·¥Ä…¥·¥Ö ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös :*" 
           "\n\nü•∫ ·¥Ä·¥Ö·¥Ö &  Ä·¥á·¥ç·¥è·¥†·¥á s·¥ú·¥Ö·¥è·¥á Äs :"
           "\n\n/addsudo [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä]"
           "\n/delsudo [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥Ñ ú·¥ú·¥õ…™ è·¥Ä.]"
           "\n\nü•∂  ú·¥á Ä·¥è·¥ã·¥ú :"
           "\n\n/usage : s ú·¥è·¥°s ·¥õ ú·¥á ·¥Ö è…¥·¥è ·¥ús·¥Ä…¢·¥á ·¥è“ì ·¥õ ú·¥á ·¥ç·¥è…¥·¥õ ú."
           "\n\nü§Ø ·¥Ñ·¥è…¥“ì…™…¢ ·¥†·¥Ä Ä…™·¥Ä ô ü·¥ás:"
           "\n\n/get_var : …¢·¥á·¥õ ·¥Ä ·¥Ñ·¥è…¥“ì…™…¢ ·¥†·¥Ä Ä “ì Ä·¥è·¥ç  ú·¥á Ä·¥è·¥ã·¥ú ·¥è Ä .·¥á…¥·¥†."
           "\n/del_var : ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä ·¥Ñ·¥è…¥“ì…™…¢ ·¥†·¥Ä Ä ·¥è…¥  ú·¥á Ä·¥è·¥ã·¥ú ·¥è Ä .·¥á…¥·¥†."
           "\n/set_var [·¥†·¥Ä Ä …¥·¥Ä·¥ç·¥á] [·¥†·¥Ä ü·¥ú·¥á] : s·¥á·¥õ ·¥è Ä ·¥ú·¥©·¥Ö·¥Ä·¥õ·¥á ·¥Ä ·¥Ñ·¥è…¥“ì…™…¢ ·¥†·¥Ä Ä ·¥è…¥  ú·¥á Ä·¥è·¥ã·¥ú ·¥è Ä .·¥á…¥·¥†."
           "\n\nü§ì  ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös:"
           "\n\n/restart :  Ä·¥ás·¥õ·¥Ä Ä·¥õs  è·¥è·¥ú Ä  ô·¥è·¥õ."
           "\n\n/update : ·¥ú·¥©·¥Ö·¥Ä·¥õ·¥ás ·¥õ ú·¥á  ô·¥è·¥õ “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥ú·¥©s·¥õ Ä·¥á·¥Ä·¥ç  Ä·¥á·¥©·¥è."
           "\n\n/speedtest : ·¥Ñ ú·¥á·¥Ñ·¥ã  ô·¥è·¥õ's s·¥á Ä·¥†·¥á Ä s·¥©·¥á·¥á·¥Ö."
           "\n\n/maintenance [·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á] : ·¥á…¥·¥Ä ô ü·¥á ·¥è Ä ·¥Ö…™s·¥Ä ô ü·¥á ·¥ç·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á ·¥ç·¥è·¥Ö·¥á ·¥è“ì  è·¥è·¥ú Ä  ô·¥è·¥õ."
           "\n\n/logger [·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á] :  ô·¥è·¥õ ·¥°…™ ü ü s·¥õ·¥Ä Ä·¥õ  ü·¥è…¢…¢…™…¥…¢ ·¥õ ú·¥á ·¥Ä·¥Ñ·¥õ…™·¥†…™·¥õ…™·¥ás  ú·¥Ä·¥©·¥©·¥á…¥ ·¥è…¥  ô·¥è·¥õ."
           "\n\n/get_log […¥·¥ú·¥ç ô·¥á Ä ·¥è“ì  ü…™…¥·¥ás] : …¢·¥á·¥õ  ü·¥è…¢s ·¥è“ì  è·¥è·¥ú Ä  ô·¥è·¥õ [·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õ ·¥†·¥Ä ü·¥ú·¥á …™s 100  ü…™…¥·¥ás]"
           "\n\nüíî “ì·¥è Ä ·¥© Ä…™·¥†·¥Ä·¥õ·¥á  ô·¥è·¥õ ·¥è…¥ ü è :"
           "\n\n/authorize [·¥Ñ ú·¥Ä·¥õ …™·¥Ö] : ·¥Ä ü ü·¥è·¥°s ·¥Ä ·¥Ñ ú·¥Ä·¥õ “ì·¥è Ä ·¥ús…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ."
           "\n/unauthorize [·¥Ñ ú·¥Ä·¥õ …™·¥Ö] : ·¥Ö…™s·¥Ä ü ü·¥è·¥°s ·¥õ ú·¥á ·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ."
           "\n/authorized : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì ·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs.",
           parse_mode=ParseMode.MARKDOWN, 
           disable_web_page_preview=True, 
           reply_markup=InlineKeyboardMarkup( 
               [
                   [
                       InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="harlay_"), 
                   ],
               ]
           ),
       )
        
        
@run_async 
def Berak_borak_callback(update: Update, context: CallbackContext):
    query = update.callback_query 
    if query.data == "berak_":  
       uptime = get_readable_time((time.time() - StartTime)) 
       query.message.edit_text( 
           text=f"*üòÖ…¢·¥á·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥°…™·¥õ ú  ô·¥è·¥õ.*" 
           "\n\n/start : s·¥õ·¥Ä Ä·¥õs ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ."
           "\n\n/help : …¢·¥á·¥õ  ú·¥á ü·¥© ·¥ç·¥á…¥·¥ú ·¥°…™·¥õ ú ·¥áx·¥© ü·¥Ä…¥·¥Ä·¥õ…™·¥è…¥ ·¥è“ì ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös."
           "\n\n/reboot :  Ä·¥á ô·¥è·¥è·¥õs ·¥õ ú·¥á  ô·¥è·¥õ “ì·¥è Ä  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ."
           "\n\n/settings : s ú·¥è·¥°s ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥© s·¥á·¥õ·¥õ…™…¥…¢s ·¥°…™·¥õ ú ·¥Ä…¥ …™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ…™·¥†·¥á …™…¥ ü…™…¥·¥á ·¥ç·¥á…¥·¥ú."
           "\n\n/sudolist : s ú·¥è·¥°s ·¥õ ú·¥á s·¥ú·¥Ö·¥è ·¥ús·¥á Äs ·¥è“ì ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ.",
           parse_mode=ParseMode.MARKDOWN, 
           disable_web_page_preview=True, 
           reply_markup=InlineKeyboardMarkup( 
               [
                   [
                       InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="harlay_"), 
                   ]
               ]
           ),
       )
        
        
@run_async
def Rangu_rungi_callback(update: Update, context: CallbackContext): 
    query = update.callback_query 
    if query.data == "rangu_": 
       uptime = get_readable_time((time.time() - StartTime)) 
       query.message.edit_text( 
           text=f"*ü§ë ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õs :*" 
           "\n\n/activevoice : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥†·¥è…™·¥Ñ·¥á·¥Ñ ú·¥Ä·¥õs ·¥è…¥ ·¥õ ú·¥á  ô·¥è·¥õ."
           "\n/activevideo : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì."
           "\n/autoend [·¥á…¥·¥Ä ô ü·¥á|·¥Ö…™s·¥Ä ô ü·¥á] : ·¥á…¥·¥Ä ô ü·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä·¥ú·¥õ·¥è ·¥á…¥·¥Ö …™“ì …¥·¥è ·¥è…¥·¥á …™s  ü…™s·¥õ·¥á…¥…™…¥…¢.",


           parse_mode=ParseMode.MARKDOWN, 
           disable_web_page_preview=True, 
           reply_markup=InlineKeyboardMarkup( 
               [
                   [
                       InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="harlay_"),
                   ],
               ]
           ),
       )
        
        
@run_async
def Kacang_kucang_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "kacang_":
       uptime = get_readable_time((time.time() - StartTime))
       query.message.edit_text(
           text=f"*ü§® s·¥á Ä·¥†·¥á Ä ·¥© ü·¥Ä è ü…™s·¥õs :*"
           "\n\n/playlist : ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥© ü·¥Ä è ü…™s·¥õ ·¥è…¥ s·¥á Ä·¥†·¥á Äs."
           "\n\n/deleteplaylist : ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä…¥ è s·¥Ä·¥†·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥  è·¥è·¥ú Ä ·¥© ü·¥Ä è ü…™s·¥õ."
           "\n\n/play : s·¥õ·¥Ä Ä·¥õs ·¥© ü·¥Ä è…™…¥…¢ “ì Ä·¥è·¥ç  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥© ü·¥Ä è ü…™s·¥õ ·¥è…¥ s·¥á Ä·¥†·¥á Ä.",
           parse_mode=ParseMode.MARKDOWN,
           disable_web_page_preview=True, 
           reply_markup=InlineKeyboardMarkup( 
               [
                   [
                       InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="harlay_"),
                   ],
               ]
           ),
       )
        
        
@run_async
def Tapai_topai_callback(update: Update, context: CallbackContext): 
    query = update.callback_query
    if query.data == "tapai_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            text=f"*üíû ·¥© ü·¥Ä è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös:.*"
            "\n\nc s·¥õ·¥Ä…¥·¥Ös “ì·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥© ü·¥Ä è."
            "\nv s·¥õ·¥Ä…¥·¥Ös “ì·¥è Ä ·¥†…™·¥Ö·¥á·¥è ·¥© ü·¥Ä è."
            "\nforce s·¥õ·¥Ä…¥·¥Ös “ì·¥è Ä “ì·¥è Ä·¥Ñ·¥á ·¥© ü·¥Ä è."
            "\n\n/play ·¥è Ä /vplay ·¥è Ä /cplay : s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥è…¥ ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ."
            "\n\n/playforce ·¥è Ä /vplayforce ·¥è Ä /cplayforce : “ì·¥è Ä·¥Ñ·¥á ·¥© ü·¥Ä è s·¥õ·¥è·¥©s ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã."
            "\n\n/channelplay [·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä …™·¥Ö] ·¥è Ä [·¥Ö…™s·¥Ä ô ü·¥á] : ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥Ä …¢ Ä·¥è·¥ú·¥© ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ Ä·¥Ä·¥Ñ·¥ãs  ô è ·¥õ ú·¥á  ú·¥á ü·¥© ·¥è“ì ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös s·¥á…¥·¥õ …™…¥ …¢ Ä·¥è·¥ú·¥©.",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="harlay_"),
                    ],
                ]
            ),
        )
        
        
@run_async
def Kecoa_kacoa_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "kecoa_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            text=f"*üçë ·¥©…™…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö :.*" 
            "\n\n/ping : s ú·¥è·¥° ·¥õ ú·¥á ·¥©…™…¥…¢ ·¥Ä…¥·¥Ö s ès·¥õ·¥á·¥ç s·¥õ·¥Ä·¥õs ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ."
            "\n\n/stats : …¢·¥á·¥õ ·¥õ·¥è·¥© 10 ·¥õ Ä·¥Ä·¥Ñ·¥ã …¢ ü·¥è ô·¥Ä ü s·¥õ·¥Ä·¥õs, ·¥õ·¥è·¥© 10 ·¥ús·¥á Äs ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ, ·¥õ·¥è·¥© 10 ·¥Ñ ú·¥Ä·¥õs ·¥è…¥ ·¥õ ú·¥á  ô·¥è·¥õ, ·¥õ·¥è·¥© 10 ·¥© ü·¥Ä è·¥á·¥Ö …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ ·¥Ä…¥·¥Ö ·¥ç·¥Ä…¥ è ·¥ç·¥è Ä·¥á..",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True, 
            reply_markup=InlineKeyboardMarkup( 
                [
                    [
                        InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="harlay_"),
                    ],
                ]
            ),
        )
        
        
@run_async
def Manuk_munak_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "manuk_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            text=f"*üòâ ·¥áx·¥õ Ä·¥Äs :.*"
            "\n\n/loop [·¥Ö…™s·¥Ä ô ü·¥á/·¥á…¥·¥Ä ô ü·¥á] ·¥è Ä [ ô·¥á·¥õ·¥°·¥á·¥á…¥ 1:10]"
            "\n: ·¥° ú·¥á…¥ ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö  ô·¥è·¥õ ·¥°…™ ü ü ·¥© ü·¥Ä è ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç …™…¥  ü·¥è·¥è·¥© “ì·¥è Ä 10 ·¥õ…™·¥ç·¥ás ·¥è Ä ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä ·¥è“ì  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ü·¥è·¥è·¥©s."
            "\n\n/shuffle : s ú·¥ú“ì“ì ü·¥á ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ãs."
            "\n\n/seek : s·¥á·¥á·¥ã ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥õ·¥è ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥."
            "\n\n/seekback :  ô·¥Ä·¥Ñ·¥ã·¥°·¥Ä Ä·¥Ö s·¥á·¥á·¥ã ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥õ·¥è ·¥õ ú·¥á ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥."
            "\n\n/lyrics [s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á] : s·¥á·¥Ä Ä·¥Ñ ú  ü è Ä…™·¥Ñs “ì·¥è Ä ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö s·¥è…¥…¢ ·¥Ä…¥·¥Ö s·¥á…¥·¥Ö ·¥õ ú·¥á  Ä·¥ás·¥ú ü·¥õs.",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="harlay_"),
                    ],
                ]
            ),
        )
        
        
@run_async
def Babi_boba_callback(update: Update, context: CallbackContext): 
    query = update.callback_query
    if query.data == "babi_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            text=f"*ü§¨ …¢ ô·¥Ä…¥ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á [·¥è…¥ ü è “ì·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs] :.*" 
            "\n\n/gban [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥Ñ ú·¥ú·¥õ…™ è·¥Ä] : …¢ ü·¥è ô·¥Ä ü ü è  ô·¥Ä…¥s ·¥õ ú·¥á ·¥Ñ ú·¥ú·¥õ…™ è·¥Ä “ì Ä·¥è·¥ç ·¥Ä ü ü ·¥õ ú·¥á s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs ·¥Ä…¥·¥Ö  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ  ú…™·¥ç “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ."
            "\n\n/ungban [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä] : …¢ ü·¥è ô·¥Ä ü ü è ·¥ú…¥ ô·¥Ä…¥s ·¥õ ú·¥á …¢ ü·¥è ô·¥Ä ü ü è  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä."
            "\n\n/gbannedusers : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì …¢ ü·¥è ô·¥Ä ü ü è  ô·¥Ä…¥…¥·¥á Ä ·¥ús·¥á Äs.",
            parse_mode=ParseMode.MARKDOWN, 
            disable_web_page_preview=True, 
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="harlay_"),
                    ],
                ]
            ),
        )
        
        
@run_async   
def Gagah_tidak_callback(update: Update, context: CallbackContext): 
    query = update.callback_query
    if query.data == "gagah_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text( 
            text=f"*üçí  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á [·¥è…¥ ü è “ì·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs] :.*"
            "\n\n/broadcast [·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á] :  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ."
            "\n\n ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢ ·¥ç·¥è·¥Ö·¥ás:"
            "\n-pin : ·¥©…™…¥s  è·¥è·¥ú Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs."
            "\n-pinloud : ·¥©…™…¥s  è·¥è·¥ú Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á …™…¥ s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs ·¥Ä…¥·¥Ö s·¥á…¥·¥Ö …¥·¥è·¥õ…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú·¥á ·¥ç·¥á·¥ç ô·¥á Äs."
            "\n-user :  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õs ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥õ ú·¥á ·¥ús·¥á Äs ·¥° ú·¥è  ú·¥Ä·¥†·¥á s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö  è·¥è·¥ú Ä  ô·¥è·¥õ."
            "\n-assistant :  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ  è·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥á “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥Äss…™·¥õ·¥Ä…¥·¥õ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ."
            "\n-nobot : “ì·¥è Ä·¥Ñ·¥ás ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è …¥·¥è·¥õ  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á."
            "\n\n**·¥áx·¥Ä·¥ç·¥© ü·¥á:** `/broadcast -user -assistant -pin ·¥õ·¥ás·¥õ…™…¥…¢  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ`.",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="harlay_"),
                    ],
                ]
            ),
        )
        
            
@run_async
def Makan_nasi_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "makan_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            text=f"*üòí  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ ·¥Ñ ú·¥Ä·¥õ :*"
            "\n ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á [·¥è…¥ ü è “ì·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs]."
            "\n\n/blacklistchat [·¥Ñ ú·¥Ä·¥õ …™·¥Ö] :  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ ·¥Ä ·¥Ñ ú·¥Ä·¥õ “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ."
            "\n\n/whitelistchat [·¥Ñ ú·¥Ä·¥õ …™·¥Ö] : ·¥° ú…™·¥õ·¥á ü…™s·¥õ ·¥õ ú·¥á  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ."
            "\n\n/blacklistedchat : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs."
            "\n\n\nüò§  ô ü·¥è·¥Ñ·¥ã ·¥ús·¥á Äs:."
            "\n\n/block [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥Ñ ú·¥ú·¥õ…™ è·¥Ä] : s·¥õ·¥Ä Ä·¥õs …™…¢…¥·¥è Ä…™…¥…¢ ·¥õ ú·¥á ·¥Ñ ú·¥ú·¥õ…™ è·¥Ä, s·¥è ·¥õ ú·¥Ä·¥õ  ú·¥á ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á  ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös."
            "\n\n/unblock [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä] : ·¥ú…¥ ô ü·¥è·¥Ñ·¥ãs ·¥õ ú·¥á  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Ä."
            "\n\n/blockedusers : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Äs.",
            parse_mode=ParseMode.MARKDOWN, 
            disable_web_page_preview=True, 
            reply_markup=InlineKeyboardMarkup( 
                [
                    [
                        InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="harlay_"),
                    ],
                ]
            ),
        )
        
        
@run_async
def Minum_gelas_callback(update: Update, context: CallbackContext): 
    query = update.callback_query
    if query.data == "minum_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            text=f"*üòú ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs :*"
            "\n·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs …™…¥ ·¥õ ú·¥á  ô·¥è·¥õ ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ. [·¥Ä·¥Ö·¥ç…™…¥s ·¥è…¥ ü è]."
            "\n\n/auth [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á] : ·¥Ä·¥Ö·¥Ö ·¥Ä ·¥ús·¥á Ä ·¥õ·¥è ·¥Ä·¥ú·¥õ ú  ü…™s·¥õ ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ."
            "\n\n/unauth [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á] :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs  ü…™s·¥õ."
            "\n\n/authusers : s ú·¥è·¥°s ·¥õ ú·¥á ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs  ü…™s·¥õ ·¥è“ì ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥©.",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True, 
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="harlay_"), 
                    ],
                ]
            ),
        )
        
        
@run_async
def Jurig_atah_callback(update: Update, context: CallbackContext):
    query = update.callback_query 
    if query.data == "jurig_": 
        uptime = get_readable_time((time.time() - StartTime)) 
        query.message.edit_text( 
            text=f"*üôÑ ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös:*" 
            "\n\n*n·¥ä·¥ús·¥õ ·¥Ä·¥Ö·¥Ö ·¥Ñ …™…¥ ·¥õ ú·¥á s·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥è“ì ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥õ·¥è ·¥ús·¥á ·¥õ ú·¥á·¥ç “ì·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü.*"
            "\n\n/pause : ·¥©·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç."
            "\n\n/resume :  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á ·¥©·¥Ä·¥ús·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç."
            "\n\n/skip : s·¥ã…™·¥© ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á …¥·¥áx·¥õ ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥ «´·¥ú·¥á·¥ú·¥á."
            "\n\n/end ·¥è Ä /stop : ·¥Ñ ü·¥á·¥Ä Äs ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á ·¥Ä…¥·¥Ö ·¥á…¥·¥Ö ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç."
            "\n\n/player : …¢·¥á·¥õ ·¥Ä …™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥© ü·¥Ä è·¥á Ä ·¥©·¥Ä…¥·¥á ü."
            "\n\n/queue : s ú·¥è·¥°s ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ãs  ü…™s·¥õ.",
            parse_mode=ParseMode.MARKDOWN, 
            disable_web_page_preview=True, 
            reply_markup=InlineKeyboardMarkup(
                [ 
                    [
                        InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="harlay_"), 
                    ],
                ]
            ),
        )
        
                    
@run_async
def Harlay_sulap_callback(update: Update, context: CallbackContext): 
    query = update.callback_query
    if query.data == "harlay_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            text=f"*üíΩ  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥ç·¥ús…™·¥Ñ.*"
            "\n\n*·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú ·¥ú…¥·¥õ·¥ú·¥ã …™…¥Íú∞·¥è Ä·¥ç·¥Äs…™  ü·¥á ô…™ ú  ü·¥Ä…¥·¥ä·¥ú·¥õ. ·¥ä…™·¥ã·¥Ä ·¥Ä…¥·¥Ö·¥Ä ·¥ç·¥á…¥…¢ ú·¥Ä·¥Ö·¥Ä·¥ò…™ ·¥ç·¥Äs·¥Ä ü·¥Ä ú ·¥Ö·¥Ä ü·¥Ä·¥ç ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú, ·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥ç·¥á…¥…¢ ú·¥ú ô·¥ú…¥…¢…™ ·¥ò·¥á·¥ç…™ ü…™·¥ã  ô·¥è·¥õ s·¥Ä è·¥Ä ·¥Ä·¥õ·¥Ä·¥ú  ô·¥á Ä·¥õ·¥Ä…¥ è·¥Ä ·¥Ö·¥Ä ü·¥Ä·¥ç ·¥è ô Ä·¥è ü·¥Ä…¥ ·¥Ö·¥ú·¥ã·¥ú…¥…¢·¥Ä…¥.*"
            "\n\n*s·¥á·¥ç·¥ú·¥Ä ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥Ö…™…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ ·¥Ö·¥á…¥…¢·¥Ä…¥: /*",
            parse_mode=ParseMode.MARKDOWN, 
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥Ä·¥Ö·¥ç…™…¥", callback_data="jurig_"
                        ),
                        InlineKeyboardButton(
                            text="·¥Ä·¥ú·¥õ ú", callback_data="minum_"
                        ),
                    
                        InlineKeyboardButton(
                            text=" ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ", callback_data="makan_"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text=" ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", callback_data="gagah_"
                        ),
                        InlineKeyboardButton(
                            text="…¢ ô·¥Ä…¥", callback_data="babi_"
                        ),
                        InlineKeyboardButton(
                            text=" ü è Ä…™·¥Ñs", callback_data="manuk_"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥ò…™…¥…¢", callback_data="kecoa_"
                        ),
                        InlineKeyboardButton(
                            text="·¥ò ü·¥Ä è", callback_data="tapai_"
                        ),
                        InlineKeyboardButton(
                            text="·¥ò ü·¥Ä è ü…™s·¥õ", callback_data="kacang_"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õs", callback_data="rangu_"
                        ),
                        InlineKeyboardButton(
                            text="s·¥õ·¥Ä Ä·¥õ", callback_data="berak_"
                        ),
                        InlineKeyboardButton(
                            text="s·¥ú·¥Ö·¥è", callback_data="mati_"
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="gusion_"), 
                    ],
                ]
            ),
        )
                        
                        
@run_async
def Gusion_lancelot_callback(update: Update, context: CallbackContext):  
    query = update.callback_query 
    if query.data == "gusion_": 
        uptime = get_readable_time((time.time() - StartTime)) 
        query.message.edit_text( 
            text=f"*üõ†Ô∏è  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú*" 
            "\n\n*·¥ò…™ ü…™ ú ·¥õ·¥è·¥ç ô·¥è ü ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á ü…™ ú·¥Ä·¥õ  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú..*",  
            parse_mode=ParseMode.MARKDOWN, 
            disable_web_page_preview=True, 
            reply_markup=InlineKeyboardMarkup( 
                [ 
                    [ 
                        InlineKeyboardButton( 
                            text="‚öôÔ∏è ·¥ç·¥Ä…¥·¥Ä…¢·¥á", callback_data="help_back"
                        ),
                        InlineKeyboardButton(
                            text="üéº ·¥ç·¥ús…™·¥ã", callback_data="harlay_" 
                        ), 
                    ], 
                    [ 
                        InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="fallen_back"), 
                    ],
                ]
            ),
        )
    
    
@run_async
def Sayang_kamu_callback(update: Update, context: CallbackContext): 
    query = update.callback_query
    if query.data == "sayang_": 
        uptime = get_readable_time((time.time() - StartTime)) 
        query.message.edit_text( 
            text=f"*üêß  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ö·¥á·¥Ä·¥ã*" 
            "\n\n*·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ö·¥á·¥Ä·¥ã ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú …™…¥…™.*", 
            parse_mode=ParseMode.MARKDOWN, 
            disable_web_page_preview=True, 
            reply_markup=InlineKeyboardMarkup( 
                [ 
                    [ 
                        InlineKeyboardButton(
                            text="·¥Ä·¥ú·¥õ·¥è·¥Ö·¥á·¥Ä·¥ã", url="http://my.telegram.org/delete" 
                        ),
                        InlineKeyboardButton( 
                            text="·¥Ä·¥ú·¥õ·¥è·¥ã·¥è…™·¥õ", url="https://t.me/https://t.me/c/1715488319/220857"
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="fallen_back"), 
                    ],
                ]
            ),
        )
        
        
@run_async
def Fallen_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "fallen_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            text=f"* ú·¥á è,*üëã\n  *·¥õ ú…™s …™s {BOT_NAME}*"
            "\n*·¥Ä  ô·¥è·¥õ ·¥ç·¥Ä…¥·¥Ä·¥ä·¥á·¥ç·¥á…¥ …¢ Ä·¥ú·¥ò  è·¥Ä…¥…¢ ·¥ã·¥ú·¥Ä·¥õ ·¥Ö…™ ô·¥ú·¥Ä·¥õ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä…¥·¥õ·¥ú ·¥Ä…¥·¥Ö·¥Ä ·¥ç·¥á…¥…¢·¥á ü·¥è ü·¥Ä …¢ Ä·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥á…¥…¢·¥Ä…¥ ·¥ç·¥ú·¥Ö·¥Ä ú ·¥Ö·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á ü…™…¥·¥Ö·¥ú…¥…¢…™ …¢ Ä·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥Ä Ä…™ s·¥Ñ·¥Ä·¥ç·¥ç·¥á Ä ·¥Ö·¥Ä…¥ s·¥ò·¥Ä·¥ç·¥ç·¥á Ä.*"
            "\n*·¥Ö…™·¥õ·¥ú ü…™s ·¥Ö…™ ·¥ò è·¥õ ú·¥è…¥ ·¥Ö·¥á…¥…¢·¥Ä…¥ s«´ ü·¥Ä ü·¥Ñ ú·¥á·¥ç è ·¥Ö·¥Ä…¥ ·¥ç·¥è…¥…¢·¥è·¥Ö ô s·¥á ô·¥Ä…¢·¥Ä…™ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.*"
            "\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            f"\n*‚ûª ·¥ú·¥©·¥õ…™·¥ç·¥á ¬ª* {uptime}"
            f"\n*‚ûª ·¥ús·¥á Äs ¬ª* {sql.num_users()}"
            f"\n*‚ûª ·¥Ñ ú·¥Ä·¥õs ¬ª* {sql.num_chats()}"
            "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            "\n\n*‚Ä¢ ·¥ä…™·¥ã·¥Ä ·¥ã·¥Ä ü…™·¥Ä…¥ ·¥ç·¥á…¥ è·¥ú·¥ã·¥Ä…™ ·¥õ·¥è·¥Ö·¥è ·¥Ö·¥Ä…¥ …™…¥…¢…™…¥  ô·¥á Ä·¥Ö·¥è…¥·¥Äs…™ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä…¥·¥õ·¥ú ·¥Ä…¢·¥Ä Ä ·¥õ·¥è·¥Ö·¥è ·¥õ·¥á·¥õ·¥Ä·¥ò ·¥Ä·¥ã·¥õ…™“ì ·¥õ·¥á Ä·¥ús.*"
            "\n\n*‚Ä¢ ·¥ã·¥Ä ü…™·¥Ä…¥  ô…™s·¥Ä  ô·¥á Ä·¥Ö·¥è…¥·¥Äs…™ ·¥Ö·¥á…¥…¢·¥Ä…¥ ·¥†…™·¥Ä ·¥è·¥†·¥è 087845681216 ·¥Ä·¥õ·¥Ä·¥ú ·¥ã·¥Ä ü…™·¥Ä…¥  ô…™s·¥Ä  ú·¥ú ô·¥ú…¥…¢…™ ·¥è·¥°…¥·¥á Ä ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú …™…¥…™.*"
            "\n\n*‚Ä¢ ·¥Ö·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã  è·¥Ä…¥…¢ s·¥ú·¥Ö·¥Ä ú  ô·¥á Ä·¥Ö·¥è…¥·¥Äs…™ s·¥Ä è·¥Ä ·¥ú·¥Ñ·¥Ä·¥ò·¥ã·¥Ä…¥ ·¥õ·¥á Ä…™·¥ç·¥Ä·¥ã·¥Äs…™ ú  ô·¥Ä…¥ è·¥Ä·¥ã üôè.*"
            f"\n\n‚ûª ·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü  è·¥Ä…¥…¢ ·¥Ö…™ ô·¥á Ä…™·¥ã·¥Ä…¥ ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú …™…¥…™ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥Ö·¥Ä…¥ …™…¥Íú∞·¥è Ä·¥ç·¥Äs…™  ü·¥á ô…™ ú  ü·¥Ä…¥·¥ä·¥ú·¥õ ·¥õ·¥á…¥·¥õ·¥Ä…¥…¢ s·¥Ä è·¥Ä {BOT_NAME}.",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="s·¥ú·¥©·¥©·¥è Ä·¥õ", url="https://t.me/gabutmaximall"
                        ),
                        InlineKeyboardButton(
                            text="·¥Ñ ú·¥Ä…¥…¥·¥á ü", url="https://t.me/yahkenatipu"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä", url="https://t.me/ItsProf"
                        ),
                        InlineKeyboardButton(
                            text="·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á Ä",
                            url="https://t.me/todoshotou"
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="fallen_back"),
                    ],
                ]
            ),
        )
    
    elif query.data == "fallen_back":
        first_name = update.effective_user.first_name
        query.message.edit_text(
            PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
            disable_web_page_preview=False,
        )


@run_async
def Source_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "source_":
        query.message.edit_text(
            text=f"""
* ú·¥á è,
 ·¥õ ú…™s …™s {BOT_NAME},
 Ä·¥á·¥ò·¥è …™…¥…™ ·¥Ö…™ ·¥ä·¥ú·¥Ä ü  ô·¥Ä Ä·¥Ä…¥…¢ ·¥ã·¥Ä ü…™ ·¥Ä·¥Ö·¥Ä  è·¥Ä…¥…¢ ·¥ç…™…¥·¥Ä·¥õ.*
 ú·¥ú ô·¥ú…¥…¢…™ ¬ª [ItsProf](https://t.me/ItsProf).





""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="·¥ã·¥á·¥ç ô·¥Ä ü…™", callback_data="source_back")]]
            ),
        )
    elif query.data == "source_back":
        first_name = update.effective_user.first_name
        query.message.edit_text(
            PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
            disable_web_page_preview=False,
        )


@run_async
def get_help(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:
        if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
            module = args[1].lower()
            update.effective_message.reply_text(
                f"Contact me in PM to get help of {module.capitalize()}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text=" ú·¥á ü·¥ò‚Äã",
                                url="t.me/{}?start=ghelp_{}".format(
                                    context.bot.username, module
                                ),
                            )
                        ]
                    ]
                ),
            )
            return
        update.effective_message.reply_text(
            "¬ª ·¥Ñ ú·¥è·¥ès·¥á ·¥Ä…¥ ·¥è·¥©·¥õ…™·¥è…¥ “ì·¥è Ä …¢·¥á·¥õ·¥õ…™…¥…¢  ú·¥á ü·¥©.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥è·¥©·¥á…¥ …™…¥ ·¥© Ä…™·¥†·¥Ä·¥õ·¥á",
                            url="https://t.me/{}?start=help".format(
                                context.bot.username
                            ),
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥è·¥©·¥á…¥  ú·¥á Ä·¥á",
                            callback_data="help_back",
                        )
                    ],
                ]
            ),
        )
        return

    elif len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = (
            "Here is the available help for the *{}* module:\n".format(
                HELPABLE[module].__mod_name__
            )
            + HELPABLE[module].__help__
        )
        send_help(
            chat.id,
            text,
            InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
            ),
        )

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                "*{}*:\n{}".format(mod.__mod_name__, mod.__user_settings__(user_id))
                for mod in USER_SETTINGS.values()
            )
            dispatcher.bot.send_message(
                user_id,
                "These are your current settings:" + "\n\n" + settings,
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any user specific settings available :'(",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        if CHAT_SETTINGS:
            chat_name = dispatcher.bot.getChat(chat_id).title
            dispatcher.bot.send_message(
                user_id,
                text="Which module would you like to check {}'s settings for?".format(
                    chat_name
                ),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )
        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any chat settings available :'(\nSend this "
                "in a group chat you're admin in to find its current settings!",
                parse_mode=ParseMode.MARKDOWN,
            )


@run_async
def settings_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user = update.effective_user
    bot = context.bot
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match.group(1)
            module = mod_match.group(2)
            chat = bot.get_chat(chat_id)
            text = "*{}* has the following settings for the *{}* module:\n\n".format(
                escape_markdown(chat.title), CHAT_SETTINGS[module].__mod_name__
            ) + CHAT_SETTINGS[module].__chat_settings__(chat_id, user.id)
            query.message.reply_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚óÅ",
                                callback_data="stngs_back({})".format(chat_id),
                            )
                        ]
                    ]
                ),
            )

        elif prev_match:
            chat_id = prev_match.group(1)
            curr_page = int(prev_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                "Hi there! There are quite a few settings for {} - go ahead and pick what "
                "you're interested in.".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        curr_page - 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif next_match:
            chat_id = next_match.group(1)
            next_page = int(next_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                "Hi there! There are quite a few settings for {} - go ahead and pick what "
                "you're interested in.".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        next_page + 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif back_match:
            chat_id = back_match.group(1)
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                text="Hi there! There are quite a few settings for {} - go ahead and pick what "
                "you're interested in.".format(escape_markdown(chat.title)),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
        query.message.delete()
    except BadRequest as excp:
        if excp.message not in [
            "Message is not modified",
            "Query_id_invalid",
            "Message can't be deleted",
        ]:
            LOGGER.exception("Exception in settings buttons. %s", str(query.data))


@run_async
def get_settings(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]

    # ONLY send settings in PM
    if chat.type != chat.PRIVATE:
        if is_user_admin(chat, user.id):
            text = "Click here to get this chat's settings, as well as yours."
            msg.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="s·¥á·¥õ·¥õ…™…¥…¢s‚Äã",
                                url="t.me/{}?start=stngs_{}".format(
                                    context.bot.username, chat.id
                                ),
                            )
                        ]
                    ]
                ),
            )
        else:
            text = "Click here to check your settings."

    else:
        send_settings(chat.id, user.id, True)


@run_async
def donate(update: Update, context: CallbackContext):
    user = update.effective_message.from_user
    chat = update.effective_chat  # type: Optional[Chat]
    bot = context.bot
    if chat.type == "private":
        update.effective_message.reply_text(
            DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
        )

        if OWNER_ID != 1356469075 and DONATION_LINK:
            update.effective_message.reply_text(
                f"¬ª ·¥õ ú·¥á ·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä ·¥è“ì {BOT_NAME} s·¥è Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á …™s [todo](https://t.me/ItsProf)."
                f"\n\n ô·¥ú·¥õ  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä üs·¥è ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ·¥õ·¥è ·¥õ ú·¥á ·¥©·¥á Äs·¥è…¥ ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è  Ä·¥ú…¥…¥…™…¥…¢ ·¥ç·¥á : [ ú·¥á Ä·¥á]({DONATION_LINK})",
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
            )

    else:
        try:
            bot.send_message(
                user.id,
                DONATE_STRING,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
            )

            update.effective_message.reply_text(
                "I've PM'ed you about donating to my creator!"
            )
        except Unauthorized:
            update.effective_message.reply_text(
                "Contact me in PM first to get donation information."
            )


def migrate_chats(update: Update, context: CallbackContext):
    msg = update.effective_message  # type: Optional[Message]
    if msg.migrate_to_chat_id:
        old_chat = update.effective_chat.id
        new_chat = msg.migrate_to_chat_id
    elif msg.migrate_from_chat_id:
        old_chat = msg.migrate_from_chat_id
        new_chat = update.effective_chat.id
    else:
        return

    LOGGER.info("Migrating from %s, to %s", str(old_chat), str(new_chat))
    for mod in MIGRATEABLE:
        mod.__migrate__(old_chat, new_chat)

    LOGGER.info("Successfully migrated!")
    raise DispatcherHandlerStop


def main():

    if SUPPORT_CHAT is not None and isinstance(SUPPORT_CHAT, str):
        try:
            dispatcher.bot.send_photo(
                f"@{SUPPORT_CHAT}",
                photo=START_IMG,
                caption=f"""
„Ö§ü•Ä {BOT_NAME} …™s ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è...

‚îè‚Ä¢‚ùÖ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚ùÖ‚ú¶‚ùÖ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚ùÖ‚Ä¢‚îì
„Ö§‚òÖ **·¥ò è·¥õ ú·¥è…¥ :** `{y()}`
„Ö§‚òÖ ** ü…™ ô Ä·¥Ä Ä è :** `{telever}`
„Ö§‚òÖ **·¥õ·¥á ü·¥á·¥õ ú·¥è…¥ :** `{tlhver}`
„Ö§‚òÖ **·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç :** `{pyrover}`
‚îó‚Ä¢‚ùÖ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚ùÖ‚ú¶‚ùÖ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚ùÖ‚Ä¢‚îõ""",
                parse_mode=ParseMode.MARKDOWN,
            )
        except Unauthorized:
            LOGGER.warning(
                f"Bot isn't able to send message to @{SUPPORT_CHAT}, go and check!"
            )
        except BadRequest as e:
            LOGGER.warning(e.message)

    start_handler = CommandHandler("start", start)

    help_handler = CommandHandler("help", get_help)
    help_callback_handler = CallbackQueryHandler(help_button, pattern=r"help_.*")

    settings_handler = CommandHandler("settings", get_settings)
    settings_callback_handler = CallbackQueryHandler(settings_button, pattern=r"stngs_")

    about_callback_handler = CallbackQueryHandler(
        Fallen_about_callback, pattern=r"fallen_"
    )
    muta_callback_handler = CallbackQueryHandler(
        Mati_muta_callback, pattern=r"mati_"
    )
    borak_callback_handler = CallbackQueryHandler(
        Berak_borak_callback, pattern=r"berak_"
    )
    rungi_callback_handler = CallbackQueryHandler(
        Rangu_rungi_callback, pattern=r"rangu_" 
    )
    kucang_callback_handler = CallbackQueryHandler(
        Kacang_kucang_callback, pattern=r"kacang_"
    )
    topai_callback_handler = CallbackQueryHandler(
        Tapai_topai_callback, pattern=r"tapai_"
    )
    kacoa_callback_handler = CallbackQueryHandler(
        Kecoa_kacoa_callback, pattern=r"kecoa_"
    )
    munak_callback_handler = CallbackQueryHandler(
        Manuk_munak_callback, pattern=r"manuk_"
    )
    boba_callback_handler = CallbackQueryHandler(
        Babi_boba_callback, pattern=r"babi_" 
    )
    tidak_callback_handler = CallbackQueryHandler(
        Gagah_tidak_callback, pattern=r"gagah_"
    )
    nasi_callback_handler = CallbackQueryHandler(
        Makan_nasi_callback, pattern=r"makan_"
    )
    gelas_callback_handler = CallbackQueryHandler(
        Minum_gelas_callback, pattern=r"minum_"
    )
    atah_callback_handler = CallbackQueryHandler(
        Jurig_atah_callback, pattern=r"jurig_"
    )
    sulap_callback_handler = CallbackQueryHandler(
        Harlay_sulap_callback, pattern=r"harlay_"
    )
    lancelot_callback_handler = CallbackQueryHandler(
        Gusion_lancelot_callback, pattern=r"gusion_"
    )
    kamu_callback_handler = CallbackQueryHandler(
        Sayang_kamu_callback, pattern=r"sayang_"
    )
    source_callback_handler = CallbackQueryHandler(
        Source_about_callback, pattern=r"source_"
    )

    donate_handler = CommandHandler("donate", donate)
    migrate_handler = MessageHandler(Filters.status_update.migrate, migrate_chats)

    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(muta_callback_handler)
    dispatcher.add_handler(borak_callback_handler)
    dispatcher.add_handler(rungi_callback_handler)
    dispatcher.add_handler(kucang_callback_handler)
    dispatcher.add_handler(topai_callback_handler)
    dispatcher.add_handler(kacoa_callback_handler)
    dispatcher.add_handler(munak_callback_handler)
    dispatcher.add_handler(boba_callback_handler)
    dispatcher.add_handler(tidak_callback_handler)
    dispatcher.add_handler(nasi_callback_handler)
    dispatcher.add_handler(gelas_callback_handler)
    dispatcher.add_handler(atah_callback_handler)
    dispatcher.add_handler(sulap_callback_handler)                   
    dispatcher.add_handler(lancelot_callback_handler)
    dispatcher.add_handler(kamu_callback_handler)
    dispatcher.add_handler(about_callback_handler)
    dispatcher.add_handler(source_callback_handler)
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(migrate_handler)
    dispatcher.add_handler(donate_handler)

    dispatcher.add_error_handler(error_callback)

    if WEBHOOK:
        LOGGER.info("Using webhooks.")
        updater.start_webhook(listen="0.0.0.0", port=PORT, url_path=TOKEN)

        if CERT_PATH:
            updater.bot.set_webhook(url=URL + TOKEN, certificate=open(CERT_PATH, "rb"))
        else:
            updater.bot.set_webhook(url=URL + TOKEN)

    else:
        LOGGER.info("Using long polling.")
        updater.start_polling(timeout=15, read_latency=4, clean=True)

    if len(argv) not in (1, 3, 4):
        telethn.disconnect()
    else:
        telethn.run_until_disconnected()

    updater.idle()


if __name__ == "__main__":
    LOGGER.info("Successfully loaded modules: " + str(ALL_MODULES))
    telethn.start(bot_token=TOKEN)
    pbot.start()
    main()
